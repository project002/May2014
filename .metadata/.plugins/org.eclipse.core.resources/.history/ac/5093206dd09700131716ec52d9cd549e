/*
 * CVirtualConnection.cpp
 *
 *  Created on: Dec 31, 2013
 *      Author: root
 */

#include "CVirtualConnection.h"
#define FIRST_ROUTER_PACKET_COLLECTOR 0
#define SECOND_ROUTER_PACKET_COLLECTOR 1
CVirtualConnection::CVirtualConnection()
{
	// TODO Auto-generated constructor stub

}

CVirtualConnection::~CVirtualConnection()
{
	// TODO Auto-generated destructor stub
}

Crafter::Packet* CVirtualConnection::GetPacket(int routerNumber)
{
	try
	{
		if (routerNumber==NO_CHOICE_OF_PACKET_COLLECTOR)
		{
			throw (CException("Virtual Connection : Need packet collector number to withdraw from!"));
		}
		if (mRouterToPacketCollectorMap.find(routerNumber)==mRouterToPacketCollectorMap.end())
		{
			throw (CException("Trying to get packet collector for invalid router"));
		}
		unsigned int fromCollector= mRouterToPacketCollectorMap.at(routerNumber);
		return mPacketCollectors[fromCollector].PopFront();
	}
	catch (CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
	return NULL;
}

bool CVirtualConnection::SendPacket(Packet* packet,int routerNumber=NO_CHOICE_OF_PACKET_COLLECTOR)
{
	try
	{

		return false;
	}
	catch (CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
	return false;
}

void CVirtualConnection::AddInvolvedRouter(const unsigned int & routerNumber)
{
	static unsigned int packetCollectorNum=0;
	mInvolvedRoutersByNumber.push_back(routerNumber);
	mRouterToPacketCollectorMap.insert(pair<unsigned int,unsigned int>(routerNumber,packetCollectorNum));
	packetCollectorNum++;
	if(packetCollectorNum>NUMBER_OF_CONNECTED_DEVICES)
	{
		throw(CException("Virtual connection holding more than 2 connections!"));
	}
}
