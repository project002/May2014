/*
 * CXMLBuilder.cpp
 *
 *  Created on: Mar 11, 2014
 *      Author: root
 */

#include "CXMLBuilder.h"
#include <fstream>
#include <boost/filesystem.hpp>
#include "DParserDefs.h"
#define DEFAULT_THREADED_EMULATION "true"
#define DEFAULT_FORMAT_VERSION 1
CXMLBuilder::CXMLBuilder():mCurrentFileName("")
{
	try
	{
		GenerateNextFileName();
		InitXML();
	}
	catch(CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
}
CXMLBuilder::CXMLBuilder(string fileName):mCurrentFileName(fileName)
{
	try
	{
		InitXML();
	}
	catch(CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
}
void CXMLBuilder::InitXML()
{
	try
	{
		OpenFileForStream();
		BuildDefaultXMLInformation();
	}
	catch (CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
}
CXMLBuilder::~CXMLBuilder()
{
	try
	{
	}
	catch(CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
}
/**
 * Function opens a file names after the generated file name in the previous steps
 * The file is opened for output only and being truncated if it exists.
 */
void CXMLBuilder::OpenFileForStream()
{
	try
	{
		mFile.open(mCurrentFileName.c_str(),std::ofstream::trunc | std::ofstream::out);
		if(!mFile.is_open())
		{
			throw(CException("File couldn't be opened!"));
		}
	}
	catch(CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
}
/**
 * Function checks whether a file exists or not.
 * It iterated over all Setup_#.xml files and finishes when a new file can be created without deleting an
 * existing XML.
 */
void CXMLBuilder::GenerateNextFileName()
{
	try
	{
		unsigned int fileNumber=0;
		while(true)
		{
			stringstream ss;
			ss.clear();
			ss<<"Setup_"<<fileNumber<<".xml";
		    boost::filesystem::path myfile(ss.str().c_str());
		    if( !boost::filesystem::exists(myfile) )
		    {
		        mCurrentFileName=ss.str();
		        break;
		    }
		}
	}
	catch(CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
}
/**
 * Function adds to the xml file the basic lines needed in the xml which includes
 * - Network
 * -- Routers
 * -- Virtual Connections
 */
void CXMLBuilder::BuildDefaultXMLInformation()
{
	try
	{
		//Adding Network layer
		mNetworkNode = mDoc.append_child(XML_LAYER_1_NETWORK);
		mNetworkNode.append_attribute(FORMAT_VERSION) = DEFAULT_FORMAT_VERSION;
		mNetworkNode.append_attribute(THREADED_EMULATION) =
				DEFAULT_THREADED_EMULATION;

		//Adding Routers layer
		mRoutersNode = mNetworkNode.append_child(
				XML_LAYER_2_ROUTERS);
		//Adding Virtual Connections layer
		mVirtualConnectionsNode = mNetworkNode.append_child(
				XML_LAYER_2_VIRTUAL_CONNECTIONS);

		//Save new XML to file
		mDoc.print(mFile);
	}
	catch (CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
}

/**
 * Adding a router to the XML file
 * @param routerInfo
 * @return false if can't be added(wrong values entered)
 */
bool CXMLBuilder::AddRouter(RouterInformation routerInfo)
{
	try
	{
		CheckRouterCorrectness(routerInfo);
		return true;
	}
	catch (CException & error)
	{
		SLogger::getInstance().Log(error.what());
		SLogger::getInstance().Log(__PRETTY_FUNCTION__);
		throw;
	}
}


bool CXMLBuilder::CheckRouterCorrectness(RouterInformation routerInfo)
{

}
/*
 * Add Router:
 * Network->Routers->Append_Child
 *
 * Edit Router(number):
 * Network->Routers->Iterate_Until_Found->Change_Values
 *
 * */
