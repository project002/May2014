/*
 * CEmulationDrawing.h
 *
 *  Created on: Mar 24, 2014
 *      Author: root
 */

#ifndef CEMULATIONDRAWING_H_
#define CEMULATIONDRAWING_H_

#include <gtkmm.h>
#include <gtkmm/drawingarea.h>
#include <gdkmm/pixbuf.h>
#include "CXMLBasicParser.h"

class CEmulationDrawing : public Gtk::DrawingArea
{
public:
	CEmulationDrawing();
	void resetDrawing(string xml_path);
	virtual ~CEmulationDrawing();
private:
	//setup xml parser
	CXMLBasicParser mXMLprs;
	void insertNewImage(Glib::ustring imageName,Glib::ustring imagePath);
	void loadImagesSrouces();
protected:
	//Override default signal handler:
	virtual bool on_draw(const Cairo::RefPtr<Cairo::Context>& cr);

	std::map< Glib::ustring,Glib::RefPtr<Gdk::Pixbuf> > mImgBuffers;
	//map iterator for the drawing process
	std::map< Glib::ustring,Glib::RefPtr<Gdk::Pixbuf> >::iterator mImageBufferDItr;
};

#endif /* CEMULATIONDRAWING_H_ */


/*
//cml parser tests
CXMLBasicParser prs;
prs.ParseXML(mImportXMLPath);
std::cout << prs.GetNumberOfRouters() << std::endl;
vector<RouterInformation> rInfo= prs.GetRoutersInformation();
vector<RouterInformation>::iterator it = rInfo.begin();
std::cout << "Buffer Information:" << std::endl;
for (;it!=rInfo.end();++it)
{
	std::cout << "\tID:" << (*it).sRouterNumber << std::endl;
	std::cout << "\tDropRate:" << (*it).sDropRate << std::endl;
	std::cout << "\tBufferSize:" << (*it).sBufferSize << std::endl;
	std::cout << "\tUsedBufferSize:" << (*it).sUsedBufferSize << std::endl;
}

std::multimap<unsigned int,unsigned int> vcons = prs.GetVirtualConnections();
std::multimap<unsigned int,unsigned int>::iterator vit= vcons.begin();
std::cout << "Virtual Connections:" << std::endl;
for (;vit!=vcons.end();++vit)
{
	std::cout << "\tFrom: " << vit->first  << " To: " << vit->second << std::endl;
}

std::multimap<unsigned int,std::string> pcons = prs.GetPhysicalConnections();
std::multimap<unsigned int,std::string>::iterator pit= pcons.begin();
std::cout << "Physical Connections:" << std::endl;
for (;pit!=pcons.end();++pit)
{
	std::cout << "\tFrom: " << pit->first  << " To: " << pit->second << std::endl;
}

std::cout << "Connections Number:" << std::endl;
for (it = rInfo.begin();it!=rInfo.end();++it)
{
	std::cout << "\tID: " << (*it).sRouterNumber  << " Count: " << prs.GetNumberOfConnectionPerRouter((*it).sRouterNumber) << std::endl;
}

///test end*/
